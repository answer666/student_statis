<?php
namespace Home\Service;

use Home\Model\QqueryLogModel;
use Home\Model\StudentModel;
use Think\Log;

class StudentService extends BaseService
{
    /**
     * 构造函数
     * @author 牧羊人
     * @since 2021/1/17
     * UserService constructor.
     */
    public function __construct()
    {
        $this->model = new StudentModel();
		$this->queryLogModel = new QqueryLogModel();
    }

    /**
     * 获取数据列表
     * @return array
     */
    public function getList()
    {
        // 参数
        $param = I("request.");
        //查询条件
        $map = [];
        return parent::getList($map, "sort asc"); // TODO: Change the autogenerated stub
    }

	public function getTotal()
	{
		return $this->model->count();
	}

	// 分组数组
	public function group($field = 'school_name') {
		// 查询并分组
		return $this->model->field($field . ', COUNT(id) as count')
			->group($field)->select();
	}

	// 对前端请求的数据二次清洗
	public function handleData($dataArr)
	{
		// 1. 获取数据
		// 2. condition
		//$condition = json_decode($dataArr['condition'], true);
		$jsonStr = json_decode(urldecode($dataArr['condition']), true)['jsonStr'];
		$conditions = json_decode($jsonStr, true);
		$whereConditions = array();
		$logicalOperator = 'AND'; // 默认逻辑操作符

		foreach ($conditions as $condition) {
			if (isset($condition['logicalOperator'])) {
				$logicalOperator = strtoupper($condition['logicalOperator']);
			}
			$conditionFieldVal = $condition['conditionFieldVal'];
			$conditionOptionVal = $condition['conditionOptionVal'];
			$conditionValue = $condition['conditionValueVal']['value'];
			$whereCondition = array();
			if ($conditionOptionVal == 'equal') {
				$whereCondition["$conditionFieldVal"] = $conditionValue;
			} elseif ($conditionOptionVal == 'unequal') {
				$whereCondition["$conditionFieldVal"] = array('NEQ', $conditionValue);
			}
			$whereConditions[] = $whereCondition;
		}

		// 构建完整的查询条件
		$where = array();
		if (!empty($whereConditions)) {
			$where['_logic'] = $logicalOperator;
			$where['_complex'] = $whereConditions;
		}
		// 3. fields
		$fields = $dataArr['fields'];
		// 4. selectedTags
		$selectedTags = explode(',', $dataArr['selectedTags']);
		// 5. showForm
		$showForm = $dataArr['showForm'];
		// 上面是拿到的条件， 需要组装成sql 查询，并记录值
		//$dataArr['selectedTags'] 是 group 字段
		// 查询的字段是 $fields = $dataArr['fields'];
		$fieldArr = [];
		//var_dump($fields);
		foreach ($fields as $key => $value) {
			if ($value === 'on' && $key === 'max_score') {
				$fieldArr[] = 'MAX(score) as max_score';
			} elseif ($value === 'on' && $key === 'min_score') {
				$fieldArr[] = 'MIN(score) as min_score';
			} elseif ($value === 'on' && $key === 'avg_score') {
				$fieldArr[] = 'AVG(score) as avg_score';
			} elseif ($value === 'on' && $key === 'number') {
				$fieldArr[] = 'COUNT(*) as number';
			} else {
				$fieldArr[] = $key;
			}
		}

		// 要查询的字段是implode(',', $fieldArr) + 分组字段 $dataArr['selectedTags']
		$queryField = implode(',', $fieldArr) . ',' . $dataArr['selectedTags'];

		// 组装成 sql 动态的
		if ($showForm === 'no' && !empty($where)) {
			$result = $this->model
				->field($queryField)
				->where($where)
				->group($dataArr['selectedTags'])
				->select();
		} else {
			$result = $this->model
				->field($queryField)
				->group($dataArr['selectedTags'])
				->select();
		}
		Log::record('sql: ' . $this->model->getLastSql());
		return [
			'result' => $result,
			'sql' => $this->model->getLastSql()
		];
	}

}